<?xml version="1.0"?>
<GST-PluginRegistry>
<plugin>
 <name>queue2</name>
 <description>Queue newer version</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstqueue2.so</filename>
 <size>49656</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>queue2</name>
  <longname>Queue</longname>
  <class>Generic</class>
  <description>Simple data queue</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>wavparse</name>
 <description>Parse a .wav file into raw audio</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstwavparse.so</filename>
 <size>40888</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>wavparse</name>
  <rank>256</rank>
  <longname>WAV audio demuxer</longname>
  <class>Codec/Demuxer/Audio</class>
  <description>Parse a .wav file into raw audio</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>wavparse_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-wav</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>wavparse_src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/ms-gsm, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)3, rate=(int)[ 8000, 48000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)2, rate=(int)[ 16000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-raw-int, endianness=(int)1234, signed=(boolean){ true, false }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-vorbis, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-ac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ]; audio/x-dts; audio/mpeg, mpegversion=(int)4, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-alaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-wms, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)microsoft, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)dvi, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)1, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)2, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)3, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-vnd.sony.atrac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-raw-float, endianness=(int)1234, width=(int){ 32, 64 }, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-voxware, voxwaretype=(int)98, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; application/x-ogg-avi</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>wavpack</name>
 <description>Wavpack lossless/lossy audio format handling</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstwavpack.so</filename>
 <size>67096</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>wavpackparse</name>
  <rank>256</rank>
  <longname>Wavpack parser</longname>
  <class>Codec/Demuxer/Audio</class>
  <description>Parses Wavpack files</description>
  <author>Arwed v. Merkatz &lt;v.merkatz@gmx.net&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/x-wavpack, width=(int)[ 1, 32 ], channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], framed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>wvcsrc</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/x-wavpack-correction, framed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-wavpack, framed=(boolean)false; audio/x-wavpack-correction, framed=(boolean)false</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>wavpackdec</name>
  <rank>256</rank>
  <longname>Wavpack audio decoder</longname>
  <class>Codec/Decoder/Audio</class>
  <description>Decodes Wavpack audio data</description>
  <author>Arwed v. Merkatz &lt;v.merkatz@gmx.net&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)32, depth=(int)[ 1, 32 ], channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], endianness=(int)1234, signed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-wavpack, width=(int)[ 1, 32 ], channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], framed=(boolean)true</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>wavpackenc</name>
  <longname>Wavpack audio encoder</longname>
  <class>Codec/Encoder/Audio</class>
  <description>Encodes audio with the Wavpack lossless/lossy audio codec</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)32, depth=(int)[ 1, 32 ], endianness=(int)1234, channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], signed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-wavpack, width=(int)[ 1, 32 ], channels=(int)[ 1, 2 ], rate=(int)[ 6000, 192000 ], framed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>wvcsrc</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/x-wavpack-correction, framed=(boolean)true</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>gio</name>
 <description>GIO elements</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgio.so</filename>
 <size>40776</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>giosink</name>
  <rank>64</rank>
  <longname>GIO sink</longname>
  <class>Sink/File</class>
  <description>Write to any GIO-supported location</description>
  <author>René Stadler &lt;mail@renestadler.de&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>sink</uri_type>
  <uri_protocol>gphoto2</uri_protocol>
  <uri_protocol>trash</uri_protocol>
  <uri_protocol>http</uri_protocol>
  <uri_protocol>burn</uri_protocol>
  <uri_protocol>smb</uri_protocol>
  <uri_protocol>archive</uri_protocol>
  <uri_protocol>localtest</uri_protocol>
  <uri_protocol>cdda</uri_protocol>
  <uri_protocol>obex</uri_protocol>
  <uri_protocol>sftp</uri_protocol>
  <uri_protocol>ssh</uri_protocol>
  <uri_protocol>computer</uri_protocol>
  <uri_protocol>ftp</uri_protocol>
  <uri_protocol>network</uri_protocol>
  <uri_protocol>dns-sd</uri_protocol>
  <uri_protocol>dav</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>giosrc</name>
  <rank>64</rank>
  <longname>GIO source</longname>
  <class>Source/File</class>
  <description>Read from any GIO-supported location</description>
  <author>René Stadler &lt;mail@renestadler.de&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>gphoto2</uri_protocol>
  <uri_protocol>trash</uri_protocol>
  <uri_protocol>http</uri_protocol>
  <uri_protocol>burn</uri_protocol>
  <uri_protocol>smb</uri_protocol>
  <uri_protocol>archive</uri_protocol>
  <uri_protocol>localtest</uri_protocol>
  <uri_protocol>cdda</uri_protocol>
  <uri_protocol>obex</uri_protocol>
  <uri_protocol>sftp</uri_protocol>
  <uri_protocol>ssh</uri_protocol>
  <uri_protocol>computer</uri_protocol>
  <uri_protocol>ftp</uri_protocol>
  <uri_protocol>network</uri_protocol>
  <uri_protocol>dns-sd</uri_protocol>
  <uri_protocol>dav</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>giostreamsink</name>
  <longname>GIO stream sink</longname>
  <class>Sink</class>
  <description>Write to any GIO stream</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>giostreamsrc</name>
  <longname>GIO stream source</longname>
  <class>Source</class>
  <description>Read from any GIO stream</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>typefindfunctions</name>
 <description>default typefind functions</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsttypefindfunctions.so</filename>
 <size>56056</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstTypeFindFactory">
  <name>video/x-ms-asf</name>
  <rank>128</rank>
  <caps>video/x-ms-asf</caps>
  <extension>asf</extension>
  <extension>wm</extension>
  <extension>wma</extension>
  <extension>wmv</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-musepack</name>
  <rank>256</rank>
  <caps>audio/x-musepack</caps>
  <extension>mpc</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-au</name>
  <rank>64</rank>
  <caps>audio/x-au</caps>
  <extension>au</extension>
  <extension>snd</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-msvideo</name>
  <rank>256</rank>
  <caps>video/x-msvideo</caps>
  <extension>avi</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/qcelp</name>
  <rank>256</rank>
  <caps>audio/qcelp</caps>
  <extension>qcp</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-cdxa</name>
  <rank>256</rank>
  <caps>video/x-cdxa</caps>
  <extension>dat</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-vcd</name>
  <rank>256</rank>
  <caps>video/x-vcd</caps>
  <extension>dat</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-imelody</name>
  <rank>256</rank>
  <caps>audio/x-imelody</caps>
  <extension>imy</extension>
  <extension>ime</extension>
  <extension>imelody</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/midi</name>
  <rank>256</rank>
  <caps>audio/midi</caps>
  <extension>mid</extension>
  <extension>midi</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-fli</name>
  <rank>64</rank>
  <caps>video/x-fli</caps>
  <extension>flc</extension>
  <extension>fli</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-id3v2</name>
  <rank>359</rank>
  <caps>application/x-id3</caps>
  <extension>mp3</extension>
  <extension>mp2</extension>
  <extension>mp1</extension>
  <extension>mpga</extension>
  <extension>ogg</extension>
  <extension>flac</extension>
  <extension>tta</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-id3v1</name>
  <rank>357</rank>
  <caps>application/x-id3</caps>
  <extension>mp3</extension>
  <extension>mp2</extension>
  <extension>mp1</extension>
  <extension>mpga</extension>
  <extension>ogg</extension>
  <extension>flac</extension>
  <extension>tta</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-apetag</name>
  <rank>358</rank>
  <caps>application/x-apetag</caps>
  <extension>ape</extension>
  <extension>mpc</extension>
  <extension>wv</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-ttafile</name>
  <rank>256</rank>
  <caps>audio/x-ttafile</caps>
  <extension>tta</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-mod</name>
  <rank>128</rank>
  <caps>audio/x-mod</caps>
  <extension>669</extension>
  <extension>amf</extension>
  <extension>dsm</extension>
  <extension>gdm</extension>
  <extension>far</extension>
  <extension>imf</extension>
  <extension>it</extension>
  <extension>med</extension>
  <extension>mod</extension>
  <extension>mtm</extension>
  <extension>okt</extension>
  <extension>sam</extension>
  <extension>s3m</extension>
  <extension>stm</extension>
  <extension>stx</extension>
  <extension>ult</extension>
  <extension>xm</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/mpeg</name>
  <rank>256</rank>
  <caps>audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ]</caps>
  <extension>mp3</extension>
  <extension>mp2</extension>
  <extension>mp1</extension>
  <extension>mpga</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-ac3</name>
  <rank>256</rank>
  <caps>audio/x-ac3</caps>
  <extension>ac3</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/mpeg-sys</name>
  <rank>256</rank>
  <caps>video/mpeg, systemstream=(boolean)true, mpegversion=(int)[ 1, 2 ]</caps>
  <extension>mpe</extension>
  <extension>mpeg</extension>
  <extension>mpg</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/mpegts</name>
  <rank>256</rank>
  <caps>video/mpegts, systemstream=(boolean)true, packetsize=(int)[ 188, 208 ]</caps>
  <extension>ts</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/ogg</name>
  <rank>256</rank>
  <caps>application/x-annodex</caps>
  <extension>anx</extension>
  <extension>ogg</extension>
  <extension>ogm</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/mpeg,elementary</name>
  <rank>128</rank>
  <caps>video/mpeg, systemstream=(boolean)false</caps>
  <extension>mpv</extension>
  <extension>mpeg</extension>
  <extension>mpg</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/mpeg-stream</name>
  <rank>64</rank>
  <caps>video/mpeg, systemstream=(boolean)false</caps>
  <extension>mpv</extension>
  <extension>mpeg</extension>
  <extension>mpg</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/mpeg4</name>
  <rank>256</rank>
  <caps>video/mpeg, systemstream=(boolean)false</caps>
  <extension>m4v</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-h264</name>
  <rank>256</rank>
  <caps>video/mpeg, systemstream=(boolean)false</caps>
  <extension>h264</extension>
  <extension>x264</extension>
  <extension>264</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-nuv</name>
  <rank>128</rank>
  <caps>video/x-nuv</caps>
  <extension>nuv</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-m4a</name>
  <rank>256</rank>
  <caps>audio/x-m4a</caps>
  <extension>m4a</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-3gp</name>
  <rank>256</rank>
  <caps>application/x-3gp</caps>
  <extension>3gp</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/quicktime</name>
  <rank>128</rank>
  <caps>video/quicktime</caps>
  <extension>mov</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/x-quicktime</name>
  <rank>128</rank>
  <caps>image/x-quicktime</caps>
  <extension>qif</extension>
  <extension>qtif</extension>
  <extension>qti</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>text/html</name>
  <rank>128</rank>
  <caps>text/html</caps>
  <extension>htm</extension>
  <extension>html</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/vnd.rn-realmedia</name>
  <rank>128</rank>
  <caps>application/vnd.rn-realmedia</caps>
  <extension>ra</extension>
  <extension>ram</extension>
  <extension>rm</extension>
  <extension>rmvb</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-pn-realaudio</name>
  <rank>128</rank>
  <caps>application/x-pn-realaudio</caps>
  <extension>ra</extension>
  <extension>ram</extension>
  <extension>rm</extension>
  <extension>rmvb</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-shockwave-flash</name>
  <rank>128</rank>
  <caps>application/x-shockwave-flash</caps>
  <extension>swf</extension>
  <extension>swfl</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-flv</name>
  <rank>128</rank>
  <caps>video/x-flv</caps>
  <extension>flv</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>text/plain</name>
  <rank>64</rank>
  <caps>text/plain</caps>
  <extension>txt</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>text/uri-list</name>
  <rank>64</rank>
  <caps>text/uri-list</caps>
  <extension>ram</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/sdp</name>
  <rank>128</rank>
  <caps>application/sdp</caps>
  <extension>sdp</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/smil</name>
  <rank>128</rank>
  <caps>application/smil</caps>
  <extension>smil</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/xml</name>
  <rank>64</rank>
  <caps>application/xml</caps>
  <extension>xml</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-wav</name>
  <rank>256</rank>
  <caps>audio/x-wav</caps>
  <extension>wav</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-aiff</name>
  <rank>128</rank>
  <caps>audio/x-aiff</caps>
  <extension>aiff</extension>
  <extension>aif</extension>
  <extension>aifc</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-svx</name>
  <rank>128</rank>
  <caps>audio/x-svx</caps>
  <extension>iff</extension>
  <extension>svx</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-paris</name>
  <rank>128</rank>
  <caps>audio/x-paris</caps>
  <extension>paf</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-nist</name>
  <rank>128</rank>
  <caps>audio/x-nist</caps>
  <extension>nist</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-voc</name>
  <rank>128</rank>
  <caps>audio/x-voc</caps>
  <extension>voc</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-sds</name>
  <rank>128</rank>
  <caps>audio/x-sds</caps>
  <extension>sds</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-ircam</name>
  <rank>128</rank>
  <caps>audio/x-ircam</caps>
  <extension>sf</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-w64</name>
  <rank>128</rank>
  <caps>audio/x-w64</caps>
  <extension>w64</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-shorten</name>
  <rank>128</rank>
  <caps>audio/x-shorten</caps>
  <extension>shn</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ape</name>
  <rank>128</rank>
  <caps>application/x-ape</caps>
  <extension>ape</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/jpeg</name>
  <rank>271</rank>
  <caps>image/jpeg</caps>
  <extension>jpg</extension>
  <extension>jpe</extension>
  <extension>jpeg</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/gif</name>
  <rank>256</rank>
  <caps>image/gif</caps>
  <extension>gif</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/png</name>
  <rank>270</rank>
  <caps>image/png</caps>
  <extension>png</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/bmp</name>
  <rank>256</rank>
  <caps>image/bmp</caps>
  <extension>bmp</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/tiff</name>
  <rank>256</rank>
  <caps>image/tiff, endianness=(int){ 4321, 1234 }</caps>
  <extension>tif</extension>
  <extension>tiff</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-matroska</name>
  <rank>256</rank>
  <caps>video/x-matroska</caps>
  <extension>mkv</extension>
  <extension>mka</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-mve</name>
  <rank>128</rank>
  <caps>video/x-mve</caps>
  <extension>mve</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-dv</name>
  <rank>128</rank>
  <caps>video/x-dv, systemstream=(boolean)true</caps>
  <extension>dv</extension>
  <extension>dif</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-amr-nb-sh</name>
  <rank>256</rank>
  <caps>audio/x-amr-nb-sh</caps>
  <extension>amr</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-amr-wb-sh</name>
  <rank>256</rank>
  <caps>audio/x-amr-wb-sh</caps>
  <extension>amr</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/iLBC-sh</name>
  <rank>256</rank>
  <caps>audio/iLBC-sh</caps>
  <extension>ilbc</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-sid</name>
  <rank>64</rank>
  <caps>audio/x-sid</caps>
  <extension>sid</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/x-xcf</name>
  <rank>128</rank>
  <caps>image/x-xcf</caps>
  <extension>xcf</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-mng</name>
  <rank>128</rank>
  <caps>video/x-mng</caps>
  <extension>mng</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/x-jng</name>
  <rank>128</rank>
  <caps>image/x-jng</caps>
  <extension>jng</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/x-xpixmap</name>
  <rank>128</rank>
  <caps>image/x-xpixmap</caps>
  <extension>xpm</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>image/x-sun-raster</name>
  <rank>128</rank>
  <caps>image/x-sun-raster</caps>
  <extension>ras</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-bzip</name>
  <rank>128</rank>
  <caps>application/x-bzip</caps>
  <extension>bz2</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-gzip</name>
  <rank>128</rank>
  <caps>application/x-gzip</caps>
  <extension>gz</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/zip</name>
  <rank>128</rank>
  <caps>application/zip</caps>
  <extension>zip</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-compress</name>
  <rank>128</rank>
  <caps>application/x-compress</caps>
  <extension>Z</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-flac</name>
  <rank>256</rank>
  <caps>audio/x-flac</caps>
  <extension>flac</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-vorbis</name>
  <rank>256</rank>
  <caps>audio/x-vorbis</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-theora</name>
  <rank>256</rank>
  <caps>video/x-theora</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ogm-video</name>
  <rank>256</rank>
  <caps>application/x-ogm-video</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ogm-audio</name>
  <rank>256</rank>
  <caps>application/x-ogm-audio</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ogm-text</name>
  <rank>256</rank>
  <caps>application/x-ogm-text</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-speex</name>
  <rank>256</rank>
  <caps>audio/x-speex</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ogg-skeleton</name>
  <rank>256</rank>
  <caps>application/x-ogg-skeleton, parsed=(boolean)false</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>text/x-cmml</name>
  <rank>256</rank>
  <caps>text/x-cmml</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-executable</name>
  <rank>64</rank>
  <caps>application/x-executable</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>adts_mpeg_stream</name>
  <rank>128</rank>
  <caps>audio/mpeg, mpegversion=(int){ 2, 4 }, framed=(boolean)false</caps>
  <extension>aac</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-spc</name>
  <rank>128</rank>
  <caps>audio/x-spc</caps>
  <extension>spc</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-wavpack</name>
  <rank>128</rank>
  <caps>audio/x-wavpack, framed=(boolean)false</caps>
  <extension>wv</extension>
  <extension>wvp</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-wavpack-correction</name>
  <rank>128</rank>
  <caps>audio/x-wavpack-correction, framed=(boolean)false</caps>
  <extension>wvc</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-rar</name>
  <rank>128</rank>
  <caps>application/x-rar</caps>
  <extension>rar</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-tar</name>
  <rank>128</rank>
  <caps>application/x-tar</caps>
  <extension>tar</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ar</name>
  <rank>128</rank>
  <caps>application/x-ar</caps>
  <extension>a</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-ms-dos-executable</name>
  <rank>128</rank>
  <caps>application/x-ms-dos-executable</caps>
  <extension>dll</extension>
  <extension>exe</extension>
  <extension>ocx</extension>
  <extension>sys</extension>
  <extension>scr</extension>
  <extension>msstyles</extension>
  <extension>cpl</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/x-dirac</name>
  <rank>256</rank>
  <caps>video/x-dirac</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>multipart/x-mixed-replace</name>
  <rank>128</rank>
  <caps>multipart/x-mixed-replace</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>application/x-mmsh</name>
  <rank>128</rank>
  <caps>application/x-mmsh</caps>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>video/vivo</name>
  <rank>128</rank>
  <caps>video/vivo</caps>
  <extension>viv</extension>
 </feature>
 <feature typename="GstTypeFindFactory">
  <name>audio/x-nsf</name>
  <rank>128</rank>
  <caps>audio/x-nsf</caps>
  <extension>nsf</extension>
 </feature>
</plugin>
<plugin>
 <name>rtsp</name>
 <description>transfer data via RTSP</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstrtsp.so</filename>
 <size>96856</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>rtspsrc</name>
  <longname>RTSP packet receiver</longname>
  <class>Source/Network</class>
  <description>Receive data over the network via RTSP (RFC 2326)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;
Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;
Lutz Mueller &lt;lutz@topfrose.de&gt;</author>
  <padtemplate>
   <nametemplate>stream%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>application/x-rtp; application/x-rdt</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <interface>GstChildProxy</interface>
  <uri_type>source</uri_type>
  <uri_protocol>rtsp</uri_protocol>
  <uri_protocol>rtspu</uri_protocol>
  <uri_protocol>rtspt</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpdec</name>
  <longname>RTP Decoder</longname>
  <class>Codec/Parser/Network</class>
  <description>Accepts raw RTP and RTCP packets and sends them forward</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>recv_rtp_sink_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>application/x-rtp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>recv_rtcp_sink_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>application/x-rtcp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>recv_rtp_src_%d_%d_%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>application/x-rtp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>rtcp_src_%d</nametemplate>
   <direction>src</direction>
   <presence>request</presence>
   <caps>application/x-rtcp</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>ximagesrc</name>
 <description>X11 video input plugin using standard Xlib calls</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstximagesrc.so</filename>
 <size>33472</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>ximagesrc</name>
  <longname>Ximage video source</longname>
  <class>Source/Video</class>
  <description>Creates a screenshot video stream</description>
  <author>Lutz Mueller &lt;lutz@users.sourceforge.net&gt;, Jan Schmidt &lt;thaytan@mad.scientist.com&gt;, Zaheer Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], pixel-aspect-ratio=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>theora</name>
 <description>Theora plugin library</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsttheora.so</filename>
 <size>62440</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>theoradec</name>
  <rank>256</rank>
  <longname>Theora video decoder</longname>
  <class>Codec/Decoder/Video</class>
  <description>decode raw theora streams to raw YUV video</description>
  <author>Benjamin Otte &lt;in7y118@public.uni-hamburg.de&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-theora</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>theoraenc</name>
  <longname>Theora video encoder</longname>
  <class>Codec/Encoder/Video</class>
  <description>encode raw YUV video to a theora stream</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-theora</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>theoraparse</name>
  <longname>Theora video parser</longname>
  <class>Codec/Parser/Video</class>
  <description>parse raw theora streams</description>
  <author>Andy Wingo &lt;wingo@pobox.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-theora</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-theora</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>playback</name>
 <description>various playback elements</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstplaybin.so</filename>
 <size>145976</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>playbin</name>
  <longname>Player Bin</longname>
  <class>Generic/Bin/Player</class>
  <description>Autoplug and play media from an uri</description>
  <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>playbin2</name>
  <longname>Player Bin 2</longname>
  <class>Generic/Bin/Player</class>
  <description>Autoplug and play media from an uri</description>
  <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>alaw</name>
 <description>ALaw audio conversion routines</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstalaw.so</filename>
 <size>17296</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>alawenc</name>
  <longname>A Law audio encoder</longname>
  <class>Codec/Encoder/Audio</class>
  <description>Convert 16bit PCM to 8bit A law</description>
  <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)16, depth=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>alawdec</name>
  <rank>256</rank>
  <longname>A Law audio decoder</longname>
  <class>Codec/Decoder/Audio</class>
  <description>Convert 8bit A law to 16bit PCM</description>
  <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)16, depth=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>taglib</name>
 <description>Tag writing plug-in based on taglib</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsttaglib.so</filename>
 <size>46160</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>id3v2mux</name>
  <longname>TagLib-based ID3v2 Muxer</longname>
  <class>Formatter/Metadata</class>
  <description>Adds an ID3v2 header to the beginning of MP3 files using taglib</description>
  <author>Christophe Fergeau &lt;teuf@gnome.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-id3</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>apev2mux</name>
  <longname>TagLib-based APEv2 Muxer</longname>
  <class>Formatter/Metadata</class>
  <description>Adds an APEv2 header to the beginning of files using taglib</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-apetag</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
</plugin>
<plugin>
 <name>wavenc</name>
 <description>Encode raw audio into WAV</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstwavenc.so</filename>
 <size>13688</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>wavenc</name>
  <longname>WAV audio muxer</longname>
  <class>Codec/Muxer/Audio</class>
  <description>Encode raw audio into WAV</description>
  <author>Iain Holmes &lt;iain@prettypeople.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-wav</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], endianness=(int)1234, width=(int)32, depth=(int)[ 25, 32 ], signed=(boolean)true; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], endianness=(int)1234, width=(int)24, depth=(int)[ 17, 24 ], signed=(boolean)true; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], endianness=(int)1234, width=(int)16, depth=(int)[ 9, 16 ], signed=(boolean)true; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], width=(int)8, depth=(int)[ 1, 8 ], signed=(boolean)false</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>udp</name>
 <description>transfer data via UDP</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstudp.so</filename>
 <size>50008</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>udpsink</name>
  <longname>UDP packet sender</longname>
  <class>Sink/Network</class>
  <description>Send data over the network via UDP</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>sink</uri_type>
  <uri_protocol>udp</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>multiudpsink</name>
  <longname>UDP packet sender</longname>
  <class>Sink/Network</class>
  <description>Send data over the network via UDP</description>
  <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>dynudpsink</name>
  <longname>UDP packet sender</longname>
  <class>Sink/Network</class>
  <description>Send data over the network via UDP</description>
  <author>Philippe Khalaf &lt;burger@speedy.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>udpsrc</name>
  <longname>UDP packet receiver</longname>
  <class>Source/Network</class>
  <description>Receive data over the network via UDP</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;
Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>udp</uri_protocol>
 </feature>
</plugin>
<plugin>
 <name>rtp</name>
 <description>Real-time protocol plugins</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstrtp.so</filename>
 <size>161880</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>rtpdepay</name>
  <longname>RTP depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Accepts raw RTP and RTCP packets and sends them forward</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>srcrtp</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>srcrtcp</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtcp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sinkrtp</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sinkrtcp</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtcp</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpac3depay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts AC3 audio from RTP packets (RFC 4184)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/ac3</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int){ 32000, 44100, 48000 }, encoding-name=(string)AC3</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpilbcpay</name>
  <longname>RTP Payloader for iLBC Audio</longname>
  <class>Codec/Payloader/Network</class>
  <description>Packetize iLBC audio streams into RTP packets</description>
  <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-iLBC, mode=(int){ 20, 30 }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)ILBC, mode=(string){ 20, 30 }</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpilbcdepay</name>
  <rank>64</rank>
  <longname>RTP iLBC packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts iLBC audio from RTP packets</description>
  <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-iLBC, mode=(int){ 20, 30 }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)ILBC, mode=(string){ 20, 30 }</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpgsmdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts GSM audio from RTP packets</description>
  <author>Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-gsm, rate=(int)8000, channels=(int)1</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)3, clock-rate=(int)8000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpgsmpay</name>
  <longname>RTP GSM audio payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes GSM audio into a RTP packet</description>
  <author>Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-gsm, rate=(int)8000, channels=(int)1</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)3, clock-rate=(int)8000, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)GSM</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpamrdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts AMR or AMR-WB audio from RTP packets (RFC 3267)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/AMR, channels=(int)1, rate=(int)8000; audio/AMR-WB, channels=(int)1, rate=(int)16000</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)AMR, encoding-params=(string)1, octet-align=(string)1, crc=(string){ 0, 1 }, robust-sorting=(string)0, interleaving=(string)0; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)AMR-WB, encoding-params=(string)1, octet-align=(string)1, crc=(string){ 0, 1 }, robust-sorting=(string)0, interleaving=(string)0</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpamrpay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encode AMR or AMR-WB audio into RTP packets (RFC 3267)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)AMR, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)AMR-WB, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/AMR, channels=(int)1, rate=(int)8000; audio/AMR-WB, channels=(int)1, rate=(int)16000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtppcmadepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts PCMA audio from RTP packets</description>
  <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-alaw, channels=(int)1, rate=(int)8000</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)PCMA; application/x-rtp, media=(string)audio, payload=(int)8, clock-rate=(int)8000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtppcmudepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts PCMU audio from RTP packets</description>
  <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-mulaw, channels=(int)1, rate=(int)8000</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)PCMU; application/x-rtp, media=(string)audio, payload=(int)0, clock-rate=(int)8000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtppcmupay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes PCMU audio into a RTP packet</description>
  <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-mulaw, channels=(int)1, rate=(int)8000</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)0, clock-rate=(int)8000, encoding-name=(string)PCMU; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)PCMU</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtppcmapay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes PCMA audio into a RTP packet</description>
  <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-alaw, channels=(int)1, rate=(int)8000</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)8, clock-rate=(int)8000, encoding-name=(string)PCMA; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)PCMA</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmpadepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts MPEG audio from RTP packets (RFC 2038)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/mpeg</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPA; application/x-rtp, media=(string)audio, payload=(int)14, clock-rate=(int)90000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmpapay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload MPEG audio as RTP packets (RFC 2038)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)14, clock-rate=(int)90000; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPA</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/mpeg</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmpvdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts MPEG video from RTP packets (RFC 2250)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/mpeg, mpegversion=(int)2, systemstream=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPV; application/x-rtp, media=(string)video, payload=(int)32, clock-rate=(int)90000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmpvpay</name>
  <longname>RTP MPEG2 ES video payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes MPEG2 ES into RTP packets (RFC 2250)</description>
  <author>Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/mpeg, mpegversion=(int)2, systemstream=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)32, clock-rate=(int)90000, encoding-name=(string)MPV</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtph263ppay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes H263/+/++ video in RTP packets (RFC 4629)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-2000</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-h263, variant=(string)itu</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtph263pdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts H263/+/++ video from RTP packets (RFC 4629)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-h263, variant=(string)itu</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-2000</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtph263depay</name>
  <rank>64</rank>
  <longname>RTP H263 packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts H263 video from RTP packets (RFC 2190)</description>
  <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;, Edward Hervey &lt;bilboed@bilboed.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-h263, variant=(string)itu, h263version=(string)h263</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)34, clock-rate=(int)90000, encoding-name=(string)H263; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtph263pay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes H263 video in RTP packets (RFC 2190)</description>
  <author>Neil Stratford &lt;neils@vipadia.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)34, clock-rate=(int)90000, encoding-name=(string)H263; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-h263, variant=(string)itu, h263version=(string)h263</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtph264depay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts H264 video from RTP packets (RFC 3984)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-h264</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H264</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtph264pay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encode H264 video into RTP packets (RFC 3984)</description>
  <author>Laurent Glayal &lt;spglegle@yahoo.fr&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H264</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-h264</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpL16pay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encode Raw audio into RTP packets (RFC 3551)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L16, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; application/x-rtp, media=(string)audio, payload=(int){ 10, 11 }, clock-rate=(int)44100</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)4321, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpL16depay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts raw audio from RTP packets</description>
  <author>Zeeshan Ali &lt;zak147@yahoo.com&gt;,Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)4321, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L16; application/x-rtp, media=(string)audio, payload=(int){ 10, 11 }, clock-rate=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>asteriskh263</name>
  <rank>64</rank>
  <longname>RTP packet parser</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts H263 video from RTP and encodes in Asterisk H263 format</description>
  <author>Neil Stratford &lt;neils@vipadia.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-asteriskh263</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp2tdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts MPEG2 TS from RTP packets (RFC 2250)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;
Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/mpegts, packetsize=(int)188, systemstream=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP2T-ES; application/x-rtp, media=(string)video, payload=(int)33, clock-rate=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp2tpay</name>
  <longname>RTP MP2T audio payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes MPEG2 TS into RTP packets (RFC 2250)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/mpegts, packetsize=(int)188, systemstream=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MP2T-ES</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp4vpay</name>
  <longname>RTP MPEG-4 Video packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload MPEG-4 video as RTP packets (RFC 3016)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4V-ES</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp4vdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts MPEG4 video from RTP packets (RFC 3016)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4V-ES</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp4adepay</name>
  <rank>64</rank>
  <longname>RTP packet parser</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts MPEG4 audio from RTP packets (RFC 3016)</description>
  <author>Nokia Corporation (contact &lt;stefan.kost@nokia.com&gt;), Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/mpeg, mpegversion=(int)4, framed=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4A-LATM</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp4gdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts MPEG4 elementary streams from RTP packets (RFC 3640)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; audio/mpeg, mpegversion=(int)4</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpmp4gpay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload MPEG4 elementary streams as RTP packets (RFC 3640)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; audio/mpeg, mpegversion=(int)4</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpspeexpay</name>
  <longname>RTP packet payloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encodes Speex audio into a RTP packet</description>
  <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-speex</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 6000, 48000 ], encoding-name=(string)SPEEX, encoding-params=(string)1</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpspeexdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts Speex audio from RTP packets</description>
  <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-speex</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 6000, 48000 ], encoding-name=(string)SPEEX, encoding-params=(string)1</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpsv3vdepay</name>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts SVQ3 video from RTP packets (no RFC)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-svq, svqversion=(int)3</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string){ X-SV3V-ES, X-SORENSON-VIDEO }</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtptheoradepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts Theora video from RTP packets (draft-01 of RFC XXXX)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)THEORA</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-theora</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtptheorapay</name>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encode Theora video into RTP packets (draft-01 RFC XXXX)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)THEORA</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-theora</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpvorbisdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts Vorbis Audio from RTP packets (draft-04 of RFC XXXX)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)VORBIS</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpvorbispay</name>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Payloader/Network</class>
  <description>Payload-encode Vorbis audio into RTP packets (draft-01 RFC XXXX)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)VORBIS</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>jpeg</name>
 <description>JPeg plugin library</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstjpeg.so</filename>
 <size>58712</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>jpegenc</name>
  <longname>JPEG image encoder</longname>
  <class>Codec/Encoder/Image</class>
  <description>Encode images in JPEG format</description>
  <author>Wim Taymans &lt;wim.taymans@tvd.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>image/jpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>jpegdec</name>
  <rank>256</rank>
  <longname>JPEG image decoder</longname>
  <class>Codec/Decoder/Image</class>
  <description>Decode images from JPEG format</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>image/jpeg, width=(int)[ 16, 4096 ], height=(int)[ 8, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>smokeenc</name>
  <rank>256</rank>
  <longname>Smoke video encoder</longname>
  <class>Codec/Encoder/Video</class>
  <description>Encode images into the Smoke format</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-smoke, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>smokedec</name>
  <rank>256</rank>
  <longname>Smoke video decoder</longname>
  <class>Codec/Decoder/Video</class>
  <description>Decode video from Smoke format</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-smoke, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>dv</name>
 <description>DV demuxer and decoder based on libdv (libdv.sf.net)</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstdv.so</filename>
 <size>45816</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>dvdemux</name>
  <rank>256</rank>
  <longname>DV system stream demuxer</longname>
  <class>Codec/Demuxer</class>
  <description>Uses libdv to separate DV audio from DV video (libdv.sourceforge.net)</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-dv, systemstream=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>video/x-dv, systemstream=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>audio</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, signed=(boolean)true, channels=(int){ 2, 4 }, endianness=(int)1234, rate=(int){ 32000, 44100, 48000 }</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>dvdec</name>
  <rank>256</rank>
  <longname>DV video decoder</longname>
  <class>Codec/Decoder/Video</class>
  <description>Uses libdv to decode DV video (smpte314) (libdv.sourceforge.net)</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;,Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-dv, systemstream=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)YUY2, width=(int)720, framerate=(fraction)[ 1/1, 60/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)720, framerate=(fraction)[ 1/1, 60/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)720, framerate=(fraction)[ 1/1, 60/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>apetag</name>
 <description>APEv1/2 tag reader</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstapetag.so</filename>
 <size>15960</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>apedemux</name>
  <rank>256</rank>
  <longname>APE tag demuxer</longname>
  <class>Codec/Demuxer/Metadata</class>
  <description>Read and output APE tags while demuxing the contents</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;, Tim-Philipp Müller &lt;tim centricular net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-apetag</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>icydemux</name>
 <description>Demux ICY tags from a stream</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsticydemux.so</filename>
 <size>17336</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>icydemux</name>
  <rank>256</rank>
  <longname>ICY tag demuxer</longname>
  <class>Codec/Demuxer/Metadata</class>
  <description>Read and output ICY tags while demuxing the contents</description>
  <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;
Michael Smith &lt;msmith@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-icy, metadata-interval=(int)[ 0, 2147483647 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>gnomevfs</name>
 <description>elements to read from and write to  Gnome-VFS uri&apos;s</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgnomevfs.so</filename>
 <size>36984</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>gnomevfssrc</name>
  <rank>128</rank>
  <longname>GnomeVFS Source</longname>
  <class>Source/File</class>
  <description>Read from any GnomeVFS-supported file</description>
  <author>Bastien Nocera &lt;hadess@hadess.net&gt;
Ronald S. Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>http</uri_protocol>
  <uri_protocol>https</uri_protocol>
  <uri_protocol>file</uri_protocol>
  <uri_protocol>smb</uri_protocol>
  <uri_protocol>ftp</uri_protocol>
  <uri_protocol>sftp</uri_protocol>
  <uri_protocol>ssh</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>gnomevfssink</name>
  <rank>128</rank>
  <longname>GnomeVFS Sink</longname>
  <class>Sink/File</class>
  <description>Write a stream to a GnomeVFS URI</description>
  <author>Bastien Nocera &lt;hadess@hadess.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>sink</uri_type>
  <uri_protocol>http</uri_protocol>
  <uri_protocol>https</uri_protocol>
  <uri_protocol>file</uri_protocol>
  <uri_protocol>smb</uri_protocol>
  <uri_protocol>ftp</uri_protocol>
  <uri_protocol>sftp</uri_protocol>
  <uri_protocol>ssh</uri_protocol>
 </feature>
</plugin>
<plugin>
 <name>uridecodebin</name>
 <description>URI Decoder bin</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstdecodebin2.so</filename>
 <size>87232</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>decodebin2</name>
  <longname>Decoder Bin</longname>
  <class>Generic/Bin/Decoder</class>
  <description>Autoplug and decode to raw media</description>
  <author>Edward Hervey &lt;edward@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>uridecodebin</name>
  <longname>URI Decoder</longname>
  <class>Generic/Bin/Decoder</class>
  <description>Autoplug and decode an URI to raw media</description>
  <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>src%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>alphacolor</name>
 <description>RGBA to AYUV colorspace conversion preserving the alpha channel</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstalphacolor.so</filename>
 <size>11616</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>alphacolor</name>
  <longname>Alpha color filter</longname>
  <class>Filter/Effect/Video</class>
  <description>RGBA to AYUV colorspace conversion preserving the alpha channel</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>video4linux</name>
 <description>elements for Video 4 Linux</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideo4linux.so</filename>
 <size>79256</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>v4lsrc</name>
  <longname>Video (video4linux/raw) Source</longname>
  <class>Source/Video</class>
  <description>Reads raw frames from a video4linux device</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstPropertyProbe</interface>
  <interface>GstColorBalance</interface>
  <interface>GstXOverlay</interface>
  <interface>GstTuner</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>mulaw</name>
 <description>MuLaw audio conversion routines</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstmulaw.so</filename>
 <size>14160</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>mulawenc</name>
  <longname>Mu Law audio encoder</longname>
  <class>Codec/Encoder/Audio</class>
  <description>Convert 16bit PCM to 8bit mu law</description>
  <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)16, depth=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>mulawdec</name>
  <rank>256</rank>
  <longname>Mu Law audio decoder</longname>
  <class>Codec/Decoder/Audio</class>
  <description>Convert 8bit mu law to 16bit PCM</description>
  <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)16, depth=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>ffmpegcolorspace</name>
 <description>colorspace conversion copied from FFMpeg 0.4.9-pre1</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstffmpegcolorspace.so</filename>
 <size>125232</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>FFMpeg</package>
 <origin>http://ffmpeg.sourceforge.net/</origin>
 <feature typename="GstElementFactory">
  <name>ffmpegcolorspace</name>
  <longname>FFMPEG Colorspace converter</longname>
  <class>Filter/Converter/Video</class>
  <description>Converts video from one colorspace to another</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)I420; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YV12; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YUY2; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)24, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)24, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, endianness=(int)4321; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)Y42B; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)Y444; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, endianness=(int)4321; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YUV9; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YVU9; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)Y41B; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)16, depth=(int)16, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, endianness=(int)1234; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)16, depth=(int)15, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, endianness=(int)1234; video/x-raw-gray, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)8, depth=(int)8; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)8, depth=(int)8, endianness=(int)1234; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)UYVY; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)IYU1; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)AYUV</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)I420; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YV12; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YUY2; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)24, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)24, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, endianness=(int)4321; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)Y42B; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)Y444; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)32, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, endianness=(int)4321; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)32, depth=(int)24, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, endianness=(int)4321; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YUV9; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)YVU9; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)Y41B; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)16, depth=(int)16, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, endianness=(int)1234; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)16, depth=(int)15, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, endianness=(int)1234; video/x-raw-gray, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)8, depth=(int)8; video/x-raw-rgb, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], bpp=(int)8, depth=(int)8, endianness=(int)1234; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)UYVY; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)IYU1; video/x-raw-yuv, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ], format=(fourcc)AYUV</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>cutter</name>
 <description>Audio Cutter to split audio into non-silent bits</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstcutter.so</filename>
 <size>17176</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>cutter</name>
  <longname>Audio cutter</longname>
  <class>Filter/Editor/Audio</class>
  <description>Audio Cutter to split audio into non-silent bits</description>
  <author>Thomas &lt;thomas@apestaart.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 8, 16 }, depth=(int){ 8, 16 }, signed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 8, 16 }, depth=(int){ 8, 16 }, signed=(boolean)true</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>cdio</name>
 <description>Read audio from audio CDs</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstcdio.so</filename>
 <size>15920</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>GPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>cdiocddasrc</name>
  <rank>127</rank>
  <longname>CD audio source (CDDA)</longname>
  <class>Source/File</class>
  <description>Read audio from CD using libcdio</description>
  <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)44100, channels=(int)2</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>cdda</uri_protocol>
 </feature>
</plugin>
<plugin>
 <name>shout2send</name>
 <description>Sends data to an icecast server using libshout2</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstshout2.so</filename>
 <size>24408</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>libshout2</package>
 <origin>http://www.icecast.org/download.html</origin>
 <feature typename="GstElementFactory">
  <name>shout2send</name>
  <longname>Icecast network sink</longname>
  <class>Sink/Network</class>
  <description>Sends data to an icecast server</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;
Pedro Corte-Real &lt;typo@netcabo.pt&gt;
Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/ogg; audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ]</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
</plugin>
<plugin>
 <name>subparse</name>
 <description>Subtitle parsing</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstsubparse.so</filename>
 <size>50280</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstTypeFindFactory">
  <name>subparse_typefind</name>
  <rank>64</rank>
  <caps>application/x-subtitle</caps>
  <extension>srt</extension>
  <extension>sub</extension>
  <extension>mpsub</extension>
  <extension>mdvd</extension>
  <extension>smi</extension>
  <extension>txt</extension>
 </feature>
 <feature typename="GstElementFactory">
  <name>subparse</name>
  <rank>256</rank>
  <longname>Subtitle parser</longname>
  <class>Codec/Parser/Subtitle</class>
  <description>Parses subtitle (.sub) files into text streams</description>
  <author>Gustavo J. A. M. Carneiro &lt;gjc@inescporto.pt&gt;
Ronald S. Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-subtitle; application/x-subtitle-sami; application/x-subtitle-tmplayer; application/x-subtitle-mpl2</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>text/plain; text/x-pango-markup</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>ssaparse</name>
  <rank>256</rank>
  <longname>SSA Subtitle Parser</longname>
  <class>Codec/Parser/Subtitle</class>
  <description>Parses SSA subtitle streams</description>
  <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-ssa; application/x-ass</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>text/x-pango-markup</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>xvimagesink</name>
 <description>XFree86 video output plugin using Xv extension</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstxvimagesink.so</filename>
 <size>66784</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>xvimagesink</name>
  <rank>256</rank>
  <longname>Video sink</longname>
  <class>Sink/Video</class>
  <description>A Xv based videosink</description>
  <author>Julien Moutte &lt;julien@moutte.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw-yuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <interface>GstNavigation</interface>
  <interface>GstPropertyProbe</interface>
  <interface>GstColorBalance</interface>
  <interface>GstXOverlay</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>level</name>
 <description>Audio level plugin</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstlevel.so</filename>
 <size>19928</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>level</name>
  <longname>Level</longname>
  <class>Filter/Analyzer/Audio</class>
  <description>RMS/Peak/Decaying Peak Level messager for audio/raw</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 8, 16 }, depth=(int){ 8, 16 }, signed=(boolean)true; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 32, 64 }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 8, 16 }, depth=(int){ 8, 16 }, signed=(boolean)true; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 32, 64 }</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>navigationtest</name>
 <description>Template for a video filter</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstnavigationtest.so</filename>
 <size>12992</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>navigationtest</name>
  <longname>Video navigation test</longname>
  <class>Filter/Effect/Video</class>
  <description>Handle navigation events showing a black square following mouse pointer</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>ladspa</name>
 <description>All LADSPA plugins</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstladspa.so</filename>
 <size>34384</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
</plugin>
<plugin>
 <name>halelements</name>
 <description>elements wrapping the GStreamer/HAL audio input/output devices</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsthalelements.so</filename>
 <size>22072</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>halaudiosink</name>
  <longname>HAL audio sink</longname>
  <class>Sink/Audio</class>
  <description>Audio sink for sound device access via HAL</description>
  <author>Jürg Billeter &lt;j@bitron.ch&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>halaudiosrc</name>
  <longname>HAL audio source</longname>
  <class>Source/Audio</class>
  <description>Audio source for sound device access via HAL</description>
  <author>Jürg Billeter &lt;j@bitron.ch&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>debug</name>
 <description>elements for testing and debugging</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstdebug.so</filename>
 <size>50904</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>breakmydata</name>
  <longname>Break my data</longname>
  <class>Testing</class>
  <description>randomly change data in the stream</description>
  <author>Benjamin Otte &lt;otte@gnome&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rndbuffersize</name>
  <longname>Random buffer size</longname>
  <class>Testing</class>
  <description>pull random sized buffers</description>
  <author>Nokia Corporation (contact &lt;stefan.kost@nokia.com&gt;)</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>navseek</name>
  <longname>Seek based on left-right arrows</longname>
  <class>Filter/Video</class>
  <description>Seek based on navigation keys left-right</description>
  <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>progressreport</name>
  <longname>Progress report</longname>
  <class>Testing</class>
  <description>Periodically query and report on processing progress</description>
  <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>testsink</name>
  <longname>Test plugin</longname>
  <class>Testing</class>
  <description>perform a number of tests</description>
  <author>Benjamin Otte &lt;otte@gnome&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>multifile</name>
 <description>Writes buffers to sequentially named files</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstmultifile.so</filename>
 <size>16408</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>multifilesrc</name>
  <longname>Multi-File Source</longname>
  <class>Source/File</class>
  <description>Read a sequentially named set of files into buffers</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>multifilesink</name>
  <longname>Multi-File Sink</longname>
  <class>Sink/File</class>
  <description>Write buffers to a sequentially named set of files</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>id3demux</name>
 <description>Demux ID3v1 and ID3v2 tags from a file</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstid3demux.so</filename>
 <size>41720</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>id3demux</name>
  <rank>256</rank>
  <longname>ID3 tag demuxer</longname>
  <class>Codec/Demuxer/Metadata</class>
  <description>Read and output ID3v1 and ID3v2 tags while demuxing the contents</description>
  <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-id3</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>gconfelements</name>
 <description>elements wrapping the GStreamer/GConf audio/video output settings</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgconfelements.so</filename>
 <size>32960</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>gconfvideosink</name>
  <longname>GConf video sink</longname>
  <class>Sink/Video</class>
  <description>Video sink embedding the GConf-settings for video output</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>gconfvideosrc</name>
  <longname>GConf video source</longname>
  <class>Source/Video</class>
  <description>Video source embedding the GConf-settings for video input</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>gconfaudiosink</name>
  <longname>GConf audio sink</longname>
  <class>Sink/Audio</class>
  <description>Audio sink embedding the GConf-settings for audio output</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;
Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>gconfaudiosrc</name>
  <longname>GConf audio source</longname>
  <class>Source/Audio</class>
  <description>Audio source embedding the GConf-settings for audio input</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>videoflip</name>
 <description>Flips and rotates video</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideoflip.so</filename>
 <size>20224</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videoflip</name>
  <longname>Video flipper</longname>
  <class>Filter/Effect/Video</class>
  <description>Flips and rotates video</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ IYUV, I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ IYUV, I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>effectv</name>
 <description>effect plugins from the effectv project</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsteffectv.so</filename>
 <size>39576</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>edgetv</name>
  <longname>EdgeTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>Apply edge detect on video</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>agingtv</name>
  <longname>AgingTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>AgingTV adds age to video input using scratches and dust</description>
  <author>Sam Lantinga &lt;slouken@devolution.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>dicetv</name>
  <longname>DiceTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>&apos;Dices&apos; the screen up into many small squares</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>warptv</name>
  <longname>WarpTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>WarpTV does realtime goo&apos;ing of the video input</description>
  <author>Sam Lantinga &lt;slouken@devolution.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>shagadelictv</name>
  <longname>ShagadelicTV</longname>
  <class>Filter/Effect/Video</class>
  <description>Oh behave, ShagedelicTV makes images shagadelic!</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>vertigotv</name>
  <longname>VertigoTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>A loopback alpha blending effector with rotating and scaling</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>revtv</name>
  <longname>RevTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>A video waveform monitor for each line of video processed</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>quarktv</name>
  <longname>QuarkTV effect</longname>
  <class>Filter/Effect/Video</class>
  <description>Motion dissolver</description>
  <author>FUKUCHI, Kentarou &lt;fukuchi@users.sourceforge.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>audiorate</name>
 <description>Adjusts audio frames</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstaudiorate.so</filename>
 <size>20000</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>audiorate</name>
  <longname>Audio rate adjuster</longname>
  <class>Filter/Effect/Audio</class>
  <description>Drops/duplicates/adjusts timestamps on audio samples to make a perfect stream</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 32, 64 }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 32, 64 }</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>videomixer</name>
 <description>Video mixer</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideomixer.so</filename>
 <size>28640</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videomixer</name>
  <rank>256</rank>
  <longname>Video mixer</longname>
  <class>Filter/Editor/Video</class>
  <description>Mix multiple video streams</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>png</name>
 <description>PNG plugin library</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstpng.so</filename>
 <size>33880</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>pngdec</name>
  <rank>256</rank>
  <longname>PNG image decoder</longname>
  <class>Codec/Decoder/Image</class>
  <description>Decode a png video frame to a raw image</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>image/png</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>pngenc</name>
  <longname>PNG image encoder</longname>
  <class>Codec/Encoder/Image</class>
  <description>Encode a video frame to a .png image</description>
  <author>Jeremy SIMON &lt;jsimon13@yahoo.fr&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>image/png, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>quicktime</name>
 <description>Quicktime support</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstqtdemux.so</filename>
 <size>123288</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>qtdemux</name>
  <rank>256</rank>
  <longname>QuickTime demuxer</longname>
  <class>Codec/Demuxer</class>
  <description>Demultiplex a QuickTime file into audio and video streams</description>
  <author>David Schleef &lt;ds@schleef.org&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/quicktime; audio/x-m4a; application/x-3gp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>audio_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>rtpxqtdepay</name>
  <rank>64</rank>
  <longname>RTP packet depayloader</longname>
  <class>Codec/Depayloader/Network</class>
  <description>Extracts Quicktime audio/video from RTP packets</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-rtp, payload=(int)[ 96, 127 ], media=(string){ audio, video }, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string){ X-QT, X-QUICKTIME }</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>videobalance</name>
 <description>Changes hue, saturation, brightness etc. on video images</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideobalance.so</filename>
 <size>16736</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videobalance</name>
  <longname>Video balance</longname>
  <class>Filter/Effect/Video</class>
  <description>Adjusts brightness, contrast, hue, saturation on a video stream</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ IYUV, I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ IYUV, I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <interface>GstColorBalance</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>videobox</name>
 <description>resizes a video by adding borders or cropping</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideobox.so</filename>
 <size>26008</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videobox</name>
  <longname>Video box filter</longname>
  <class>Filter/Effect/Video</class>
  <description>Resizes a video by adding borders or cropping</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>spectrum</name>
 <description>Run an FFT on the audio signal, output spectrum data</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstspectrum.so</filename>
 <size>21424</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>spectrum</name>
  <longname>Spectrum analyzer</longname>
  <class>Filter/Analyzer/Audio</class>
  <description>Run an FFT on the audio signal, output spectrum data</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)16, depth=(int)16, signed=(boolean)true, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, width=(int)32, depth=(int)32, signed=(boolean)true, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, width=(int)16, depth=(int)16, signed=(boolean)true, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, width=(int)32, depth=(int)32, signed=(boolean)true, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>cdparanoia</name>
 <description>Read audio from CD in paranoid mode</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstcdparanoia.so</filename>
 <size>19960</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>GPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>cdparanoiasrc</name>
  <rank>128</rank>
  <longname>CD Audio (cdda) Source, Paranoia IV</longname>
  <class>Source/File</class>
  <description>Read audio from CD in paranoid mode</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)44100, channels=(int)2</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>cdda</uri_protocol>
 </feature>
</plugin>
<plugin>
 <name>audiotestsrc</name>
 <description>Creates audio test signals of given frequency and volume</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstaudiotestsrc.so</filename>
 <size>28576</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>audiotestsrc</name>
  <longname>Audio test source</longname>
  <class>Source/Audio</class>
  <description>Creates audio test signals of given frequency and volume</description>
  <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)1; audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int)32, depth=(int)32, rate=(int)[ 1, 2147483647 ], channels=(int)1; audio/x-raw-float, endianness=(int)1234, width=(int){ 32, 64 }, rate=(int)[ 1, 2147483647 ], channels=(int)1</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>flac</name>
 <description>The FLAC Lossless compressor Codec</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstflac.so</filename>
 <size>70776</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>flacenc</name>
  <longname>FLAC audio encoder</longname>
  <class>Codec/Encoder/Audio</class>
  <description>Encodes audio with the FLAC lossless audio encoder</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-flac</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 8000, 96000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>flacdec</name>
  <rank>256</rank>
  <longname>FLAC audio decoder</longname>
  <class>Codec/Decoder/Audio</class>
  <description>Decodes FLAC lossless audio streams</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-flac</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int){ 8, 16, 32 }, depth=(int){ 8, 12, 16, 20, 24, 32 }, rate=(int)[ 8000, 96000 ], channels=(int)[ 1, 8 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>audiofx</name>
 <description>Audio effects plugin</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstaudiofx.so</filename>
 <size>87320</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>GStreamer</package>
 <origin>http://gstreamer.net/</origin>
 <feature typename="GstElementFactory">
  <name>audiopanorama</name>
  <longname>Stereo positioning</longname>
  <class>Filter/Effect/Audio</class>
  <description>Positions audio streams in the stereo panorama</description>
  <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)2, endianness=(int)1234, width=(int)32; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)2, endianness=(int)1234, width=(int)16, depth=(int)16, signed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], endianness=(int)1234, width=(int)32; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], endianness=(int)1234, width=(int)16, depth=(int)16, signed=(boolean)true</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audioinvert</name>
  <longname>Audio inversion</longname>
  <class>Filter/Effect/Audio</class>
  <description>Swaps upper and lower half of audio samples</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int)32, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int)32, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audioamplify</name>
  <longname>Audio amplifier</longname>
  <class>Filter/Effect/Audio</class>
  <description>Amplifies an audio stream by a given factor</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int)32, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int)32, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audiodynamic</name>
  <longname>Dynamic range controller</longname>
  <class>Filter/Effect/Audio</class>
  <description>Compressor and Expander</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int)32, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int)32, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audiocheblimit</name>
  <longname>Low pass &amp; high pass filter</longname>
  <class>Filter/Effect/Audio</class>
  <description>Chebyshev low pass and high pass filter</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audiochebband</name>
  <longname>Band pass &amp; band reject filter</longname>
  <class>Filter/Effect/Audio</class>
  <description>Chebyshev band pass and band reject filter</description>
  <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audiowsinclimit</name>
  <longname>Low pass &amp; high pass filter</longname>
  <class>Filter/Effect/Audio</class>
  <description>Low pass and high pass windowed sinc filter</description>
  <author>Thomas &lt;thomas@apestaart.org&gt;, Steven W. Smith, Dreamlab Technologies Ltd. &lt;mathis.hofer@dreamlab.net&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>audiowsincband</name>
  <longname>Band pass &amp; band reject filter</longname>
  <class>Filter/Effect/Audio</class>
  <description>Band pass and band reject windowed sinc filter</description>
  <author>Thomas &lt;thomas@apestaart.org&gt;, Steven W. Smith, Dreamlab Technologies Ltd. &lt;mathis.hofer@dreamlab.net&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>goom</name>
 <description>GOOM visualization filter</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgoom.so</filename>
 <size>28376</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>goom</name>
  <longname>GOOM: what a GOOM!</longname>
  <class>Visualization</class>
  <description>Takes frames of data and outputs video frames using the GOOM filter</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 8000, 96000 ], channels=(int){ 1, 2 }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>tcp</name>
 <description>transfer data over the network via TCP</description>
 <filename>/usr/lib64/gstreamer-0.10/libgsttcp.so</filename>
 <size>92856</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>tcpclientsink</name>
  <longname>TCP client sink</longname>
  <class>Sink/Network</class>
  <description>Send data as a client over the network via TCP</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>tcpclientsrc</name>
  <longname>TCP client source</longname>
  <class>Source/Network</class>
  <description>Receive data as a client over the network via TCP</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>tcpserversink</name>
  <longname>TCP server sink</longname>
  <class>Sink/Network</class>
  <description>Send data as a server over the network via TCP</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>tcpserversrc</name>
  <longname>TCP server source</longname>
  <class>Source/Network</class>
  <description>Receive data as a server over the network via TCP</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>multifdsink</name>
  <longname>Multi filedescriptor sink</longname>
  <class>Sink/Network</class>
  <description>Send data to multiple filedescriptors</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>matroska</name>
 <description>Matroska stream handling</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstmatroska.so</filename>
 <size>116408</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>matroskademux</name>
  <rank>256</rank>
  <longname>Matroska demuxer</longname>
  <class>Codec/Demuxer</class>
  <description>Demuxes a Matroska Stream into video/audio/subtitles</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>video_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>audio_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>subtitle_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>text/plain; application/x-ssa; application/x-ass; application/x-usf; video/x-dvd-subpicture; application/x-subtitle-unknown</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-matroska</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>matroskamux</name>
  <longname>Matroska muxer</longname>
  <class>Codec/Muxer</class>
  <description>Muxes video/audio/subtitle streams into a matroska stream</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>video_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>video/mpeg, mpegversion=(int){ 1, 2, 4 }, systemstream=(boolean)false, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-h264, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-divx, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-xvid, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-huffyuv, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-dv, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-h263, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-msmpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; image/jpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-theora; video/x-dirac, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc){ YUY2, I420 }, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>audio_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ], channels=(int)[ 1, 8 ], rate=(int)[ 8000, 96000 ]; audio/mpeg, mpegversion=(int){ 2, 4 }, channels=(int)[ 1, 8 ], rate=(int)[ 8000, 96000 ]; audio/x-ac3, channels=(int)[ 1, 8 ], rate=(int)[ 8000, 96000 ]; audio/x-vorbis, channels=(int)[ 1, 8 ], rate=(int)[ 8000, 96000 ]; audio/x-raw-int, width=(int)8, depth=(int)8, signed=(boolean)false, channels=(int)[ 1, 8 ], rate=(int)[ 8000, 96000 ]; audio/x-raw-int, width=(int)16, depth=(int)16, endianness=(int){ 4321, 1234 }, signed=(boolean)true, channels=(int)[ 1, 8 ], rate=(int)[ 8000, 96000 ]; audio/x-tta, width=(int){ 8, 16, 24 }, channels=(int){ 1, 2 }, rate=(int)[ 8000, 96000 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>subtitle_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-matroska</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
</plugin>
<plugin>
 <name>flxdec</name>
 <description>FLC/FLI/FLX video decoder</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstflxdec.so</filename>
 <size>17816</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>flxdec</name>
  <rank>256</rank>
  <longname>FLX audio decoder</longname>
  <class>Codec/Decoder/Video</class>
  <description>FLC/FLI/FLX video decoder</description>
  <author>Sepp Wijnands &lt;mrrazz@garbage-coderz.net&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-fli</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>vorbis</name>
 <description>Vorbis plugin library</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvorbis.so</filename>
 <size>66536</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>vorbisenc</name>
  <longname>Vorbis audio encoder</longname>
  <class>Codec/Encoder/Audio</class>
  <description>Encodes audio in Vorbis format</description>
  <author>Monty &lt;monty@xiph.org&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 200000 ], channels=(int)[ 1, 256 ], endianness=(int)1234, width=(int)32</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>vorbisdec</name>
  <rank>256</rank>
  <longname>Vorbis audio decoder</longname>
  <class>Codec/Decoder/Audio</class>
  <description>decode raw vorbis streams to float audio</description>
  <author>Benjamin Otte &lt;in7y118@public.uni-hamburg.de&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 256 ], endianness=(int)1234, width=(int)32</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>vorbisparse</name>
  <longname>VorbisParse</longname>
  <class>Codec/Parser/Audio</class>
  <description>parse raw vorbis streams</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>vorbistag</name>
  <longname>VorbisTag</longname>
  <class>Formatter/Metadata</class>
  <description>Retags vorbis streams</description>
  <author>James Livingston &lt;doclivingston@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
</plugin>
<plugin>
 <name>autodetect</name>
 <description>Plugin contains auto-detection plugins for video/audio outputs</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstautodetect.so</filename>
 <size>24496</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>autovideosink</name>
  <longname>Auto video sink</longname>
  <class>Sink/Video</class>
  <description>Wrapper video sink for automatically detected video sink</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;
Jan Schmidt &lt;thaytan@noraisin.net</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>autoaudiosink</name>
  <longname>Auto audio sink</longname>
  <class>Sink/Audio</class>
  <description>Wrapper audio sink for automatically detected audio sink</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;
Jan Schmidt &lt;thaytan@noraisin.net</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>cairo</name>
 <description>Cairo-based overlaying</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstcairo.so</filename>
 <size>33208</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>cairotextoverlay</name>
  <longname>Text overlay</longname>
  <class>Filter/Editor/Video</class>
  <description>Adds text strings on top of a video buffer</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>text_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>text/plain</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>cairotimeoverlay</name>
  <longname>Time overlay</longname>
  <class>Filter/Editor/Video</class>
  <description>Overlays the time on a video stream</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>decodebin</name>
 <description>decoder bin</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstdecodebin.so</filename>
 <size>41696</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>decodebin</name>
  <longname>Decoder Bin</longname>
  <class>Generic/Bin/Decoder</class>
  <description>Autoplug and decode to raw media</description>
  <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>videocrop</name>
 <description>Crops video into a user-defined region</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideocrop.so</filename>
 <size>24064</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videocrop</name>
  <longname>Crop</longname>
  <class>Filter/Effect/Video</class>
  <description>Crops video into a user-defined region</description>
  <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YUY2, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YVYU, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)UYVY, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y800, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YV12, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)16, endianness=(int)1234, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)15, endianness=(int)1234, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YUY2, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YVYU, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)UYVY, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y800, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YV12, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)16, endianness=(int)1234, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)15, endianness=(int)1234, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>ossaudio</name>
 <description>OSS (Open Sound System) support for GStreamer</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstossaudio.so</filename>
 <size>49464</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>ossmixer</name>
  <longname>OSS Mixer</longname>
  <class>Generic/Audio</class>
  <description>Control sound input and output levels with OSS</description>
  <author>Andrew Vander Wingo &lt;wingo@pobox.com&gt;</author>
  <interface>GstMixer</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>osssrc</name>
  <rank>256</rank>
  <longname>Audio Source (OSS)</longname>
  <class>Source/Audio</class>
  <description>Capture from a sound card via OSS</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int){ 1234 }, signed=(boolean){ true, false }, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ]; audio/x-raw-int, signed=(boolean){ true, false }, width=(int)8, depth=(int)8, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <interface>GstMixer</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>osssink</name>
  <rank>128</rank>
  <longname>Audio Sink (OSS)</longname>
  <class>Sink/Audio</class>
  <description>Output to a sound card via OSS</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int){ 1234 }, signed=(boolean){ true, false }, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ]; audio/x-raw-int, signed=(boolean){ true, false }, width=(int)8, depth=(int)8, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>pango</name>
 <description>Pango-based text rendering and overlay</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstpango.so</filename>
 <size>50904</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>textoverlay</name>
  <longname>Text overlay</longname>
  <class>Filter/Editor/Video</class>
  <description>Adds text strings on top of a video buffer</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>text_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>text/x-pango-markup; text/plain</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>timeoverlay</name>
  <longname>Time overlay</longname>
  <class>Filter/Editor/Video</class>
  <description>Overlays buffer time stamps on a video stream</description>
  <author>Tim-Philipp Müller &lt;tim@centricular.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>clockoverlay</name>
  <longname>Clock overlay</longname>
  <class>Filter/Editor/Video</class>
  <description>Overlays the current clock time on a video stream</description>
  <author>Tim-Philipp Müller &lt;tim@centricular.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>textrender</name>
  <longname>Text renderer</longname>
  <class>Filter/Editor/Video</class>
  <description>Renders a text string to an image bitmap</description>
  <author>David Schleef &lt;ds@schleef.org&gt;, Ronald S. Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>text/x-pango-markup; text/plain</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>videorate</name>
 <description>Adjusts video frames</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideorate.so</filename>
 <size>24896</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videorate</name>
  <longname>Video rate adjuster</longname>
  <class>Filter/Effect/Video</class>
  <description>Drops/duplicates/adjusts timestamps on video frames to make a perfect stream</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv; video/x-raw-rgb</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv; video/x-raw-rgb</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>audioconvert</name>
 <description>Convert audio to different formats</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstaudioconvert.so</filename>
 <size>59000</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>audioconvert</name>
  <rank>256</rank>
  <longname>Audio converter</longname>
  <class>Filter/Converter/Audio</class>
  <description>Convert audio to different formats</description>
  <author>Benjamin Otte &lt;in7y118@public.uni-hamburg.de&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)64; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)32; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)32, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)24, depth=(int)[ 1, 24 ], signed=(boolean){ true, false }; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)16, depth=(int)[ 1, 16 ], signed=(boolean){ true, false }; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)8, depth=(int)[ 1, 8 ], signed=(boolean){ true, false }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)64; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)32; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)32, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)24, depth=(int)[ 1, 24 ], signed=(boolean){ true, false }; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)16, depth=(int)[ 1, 16 ], signed=(boolean){ true, false }; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 8 ], endianness=(int){ 1234, 4321 }, width=(int)8, depth=(int)[ 1, 8 ], signed=(boolean){ true, false }</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>videotestsrc</name>
 <description>Creates a test video stream</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideotestsrc.so</filename>
 <size>36808</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videotestsrc</name>
  <longname>Video test source</longname>
  <class>Source/Video</class>
  <description>Creates a test video stream</description>
  <author>David A. Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)YUY2, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)UYVY, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y422, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)UYNV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YVYU, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)IYU2, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YVU9, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YUV9, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YV12, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y41B, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y42B, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y800, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)24, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)24, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)32, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)32, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)32, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, endianness=(int)4321, depth=(int)32, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, endianness=(int)4321, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, endianness=(int)4321, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, endianness=(int)1234, depth=(int)16, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, endianness=(int)1234, depth=(int)15, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-bayer, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>adder</name>
 <description>Adds multiple streams</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstadder.so</filename>
 <size>24344</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>adder</name>
  <longname>Adder</longname>
  <class>Generic/Audio</class>
  <description>Add N audio channels together</description>
  <author>Thomas &lt;thomas@apestaart.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 32, 64 }</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 32, 64 }</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>annodex</name>
 <description>annodex stream manipulation (info about annodex: http://www.annodex.net)</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstannodex.so</filename>
 <size>53848</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>cmmlenc</name>
  <longname>CMML streams encoder</longname>
  <class>Codec/Encoder</class>
  <description>Encodes CMML streams</description>
  <author>Alessandro Decina &lt;alessandro@nnva.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>text/x-cmml, encoded=(boolean)false</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>text/x-cmml, encoded=(boolean)true</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>cmmldec</name>
  <rank>256</rank>
  <longname>CMML stream decoder</longname>
  <class>Codec/Decoder</class>
  <description>Decodes CMML streams</description>
  <author>Alessandro Decina &lt;alessandro@nnva.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>text/x-cmml, encoded=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>text/x-cmml, encoded=(boolean)false</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>volume</name>
 <description>plugin for controlling audio volume</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvolume.so</filename>
 <size>17520</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>volume</name>
  <longname>Volume</longname>
  <class>Filter/Effect/Audio</class>
  <description>Set volume on audio/raw streams</description>
  <author>Andy Wingo &lt;wingo@pobox.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 32, 64 }; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)8, depth=(int)8, signed=(boolean)true; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)16, depth=(int)16, signed=(boolean)true; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)24, depth=(int)24, signed=(boolean)true; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)32, depth=(int)32, signed=(boolean)true</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int){ 32, 64 }; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)8, depth=(int)8, signed=(boolean)true; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)16, depth=(int)16, signed=(boolean)true; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)24, depth=(int)24, signed=(boolean)true; audio/x-raw-int, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)32, depth=(int)32, signed=(boolean)true</caps>
  </padtemplate>
  <interface>GstMixer</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>auparse</name>
 <description>parses au streams</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstauparse.so</filename>
 <size>20312</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>auparse</name>
  <rank>128</rank>
  <longname>AU audio demuxer</longname>
  <class>Codec/Demuxer/Audio</class>
  <description>Parse an .au file into raw audio</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-au</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], signed=(boolean){ true, false }; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int){ 1234, 4321 }, width=(int){ 32, 64 }; audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]; audio/x-adpcm, layout=(string){ g721, g722, g723_3, g723_5 }</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>smpte</name>
 <description>Apply the standard SMPTE transitions on video images</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstsmpte.so</filename>
 <size>58168</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>smpte</name>
  <longname>SMPTE transitions</longname>
  <class>Filter/Editor/Video</class>
  <description>Apply the standard SMPTE transitions on video images</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink1</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink2</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>coreindexers</name>
 <description>GStreamer core indexers</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstcoreindexers.so</filename>
 <size>25048</size>
 <m32p>1207306682</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gstreamer</source>
 <package>Fedora Core gstreamer package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstIndexFactory">
  <name>memindex</name>
  <longdesc>A index that stores entries in memory</longdesc>
 </feature>
 <feature typename="GstIndexFactory">
  <name>fileindex</name>
  <longdesc>A index that stores entries in file</longdesc>
 </feature>
</plugin>
<plugin>
 <name>pulseaudio</name>
 <description>PulseAudio Elements Plugin</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstpulse.so</filename>
 <size>57976</size>
 <m32p>1203734274</m32p>
 <version>0.10.0.9.5</version>
 <license>LGPL</license>
 <source>gst-pulse</source>
 <package>pulseaudio</package>
 <origin>http://0pointer.de/lennart/projects/gst-pulse/</origin>
 <feature typename="GstElementFactory">
  <name>pulsesink</name>
  <rank>266</rank>
  <longname>PulseAudio Audio Sink</longname>
  <class>Sink/Audio</class>
  <description>Plays audio to a PulseAudio server</description>
  <author>Lennart Poettering</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-raw-int, signed=(boolean)false, width=(int)8, depth=(int)8, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-raw-float, endianness=(int){ 1234, 4321 }, width=(int)32, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-alaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-mulaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>pulsesrc</name>
  <rank>266</rank>
  <longname>PulseAudio Audio Source</longname>
  <class>Source/Audio</class>
  <description>Captures audio from a PulseAudio server</description>
  <author>Lennart Poettering</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-raw-int, signed=(boolean)false, width=(int)8, depth=(int)8, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-raw-float, endianness=(int){ 1234, 4321 }, width=(int)32, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-alaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]; audio/x-mulaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 16 ]</caps>
  </padtemplate>
  <interface>GstMixer</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>pulsemixer</name>
  <longname>PulseAudio Mixer</longname>
  <class>Generic/Audio</class>
  <description>Control sound input and output levels for PulseAudio</description>
  <author>Lennart Poettering</author>
  <interface>GstMixer</interface>
  <interface>GstPropertyProbe</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>efence</name>
 <description>This element converts a stream of normal GStreamer buffers into a stream of buffers that are allocated in such a way that out-of-bounds access to data in the buffer is more likely to cause segmentation faults.  This allocation method is very similar to the debugging tool &quot;Electric Fence&quot;.</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstefence.so</filename>
 <size>16440</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>efence</name>
  <longname>Electric Fence</longname>
  <class>Testing</class>
  <description>This element converts a stream of normal GStreamer buffers into a stream of buffers that are allocated in such a way that out-of-bounds access to data in the buffer is more likely to cause segmentation faults.  This allocation method is very similar to the debugging tool &quot;Electric Fence&quot;.</description>
  <author>David A. Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>avi</name>
 <description>AVI stream handling</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstavi.so</filename>
 <size>107992</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>avidemux</name>
  <rank>256</rank>
  <longname>Avi demuxer</longname>
  <class>Codec/Demuxer</class>
  <description>Demultiplex an avi file into audio and video</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;
Wim Taymans &lt;wim.taymans@chello.be&gt;
Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>audio_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/ms-gsm, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)3, rate=(int)[ 8000, 48000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)2, rate=(int)[ 16000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-raw-int, endianness=(int)1234, signed=(boolean){ true, false }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-vorbis, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-ac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ]; audio/x-dts; audio/mpeg, mpegversion=(int)4, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-alaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-wms, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)microsoft, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)dvi, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)1, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)2, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)3, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-vnd.sony.atrac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-raw-float, endianness=(int)1234, width=(int){ 32, 64 }, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-voxware, voxwaretype=(int)98, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; application/x-ogg-avi; audio/x-avi-unknown</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>video/x-3ivx, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-asus, asusversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-asus, asusversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-cirrus-logic-accupak, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-compressed-yuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-rgb, bpp=(int){ 8, 24 }, depth=(int){ 8, 24 }, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-divx, divxversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-divx, divxversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-truemotion, trueversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-dv, systemstream=(boolean)false, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-divx, divxversion=(int)5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-flash-video, flvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h264, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-huffyuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-intel-h263, variant=(string)intel, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-yuv, format=(fourcc)I420, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)lead, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)microsoft, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/mpeg, mpegversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; image/jpeg, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msmpeg, msmpegversion=(int)42, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msmpeg, msmpegversion=(int)43, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/mpeg, systemstream=(boolean)false, mpegversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/mpeg, systemstream=(boolean)false, mpegversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msmpeg, msmpegversion=(int)41, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-mszh, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; image/png, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-rle, layout=(string)microsoft, depth=(int)[ 1, 64 ], framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/sp5x, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-truemotion, trueversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-camtasia, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-ultimotion, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-ati-vcr, vcrversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-ati-vcr, vcrversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)vdolive, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)vivo, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-vmnc, version=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-vp3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h264, variant=(string)videosoft, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-wmv, wmvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-wmv, wmvversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-wmv, wmvversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-xvid, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-xan, wcversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-yuv, format=(fourcc)YUY2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-yuv, format=(fourcc)YVU9, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-zlib, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-cinepak, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h264, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msvideocodec, msvideoversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)xirlink, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-dirac, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-dv, systemstream=(boolean)true; video/x-avi-unknown</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>subtitle_%02d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>application/x-subtitle-avi</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-msvideo</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>avimux</name>
  <longname>Avi muxer</longname>
  <class>Codec/Muxer</class>
  <description>Muxes audio and video into an avi stream</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-msvideo</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>audio_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>audio/x-raw-int, endianness=(int)1234, signed=(boolean){ true, false }, width=(int){ 8, 16 }, depth=(int){ 8, 16 }, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)4, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-ac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>video_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ YUY2, I420 }, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; image/jpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-divx, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], divxversion=(int)[ 3, 5 ]; video/x-xvid, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-3ivx, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-msmpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], msmpegversion=(int)[ 41, 43 ]; video/mpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], mpegversion=(int){ 1, 2, 4 }, systemstream=(boolean)false; video/x-h263, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-h264, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-dv, width=(int)720, height=(int){ 576, 480 }, framerate=(fraction)[ 0/1, 2147483647/1 ], systemstream=(boolean)false; video/x-huffyuv, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>avisubtitle</name>
  <rank>256</rank>
  <longname>Avi subtitle parser</longname>
  <class>Codec/Parser/Subtitle</class>
  <description>Parse avi subtitle stream</description>
  <author>Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-subtitle-avi</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-subtitle</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>equalizer</name>
 <description>GStreamer audio equalizers</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstequalizer.so</filename>
 <size>25944</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>equalizer-nbands</name>
  <longname>N Band Equalizer</longname>
  <class>Filter/Effect/Audio</class>
  <description>Direct Form IIR equalizer</description>
  <author>Benjamin Otte &lt;otte@gnome.org&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>equalizer-3bands</name>
  <longname>3 Band Equalizer</longname>
  <class>Filter/Effect/Audio</class>
  <description>Direct Form 3 band IIR equalizer</description>
  <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>equalizer-10bands</name>
  <longname>10 Band Equalizer</longname>
  <class>Filter/Effect/Audio</class>
  <description>Direct Form 10 band IIR equalizer</description>
  <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, depth=(int)16, width=(int)16, endianness=(int)1234, signed=(boolean)true, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-float, width=(int){ 32, 64 }, endianness=(int)1234, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <interface>GstChildProxy</interface>
 </feature>
</plugin>
<plugin>
 <name>audioresample</name>
 <description>Resamples audio</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstaudioresample.so</filename>
 <size>40576</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>audioresample</name>
  <rank>256</rank>
  <longname>Audio scaler</longname>
  <class>Filter/Converter/Audio</class>
  <description>Resample audio</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)16, depth=(int)16, signed=(boolean)true; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)32, depth=(int)32, signed=(boolean)true; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)32; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)64</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)16, depth=(int)16, signed=(boolean)true; audio/x-raw-int, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)32, depth=(int)32, signed=(boolean)true; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)32; audio/x-raw-float, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], endianness=(int)1234, width=(int)64</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>libvisual</name>
 <description>libvisual visualization plugins</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstlibvisual.so</filename>
 <size>25088</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
</plugin>
<plugin>
 <name>alpha</name>
 <description>adds an alpha channel to video - constant or via chroma-keying</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstalpha.so</filename>
 <size>20088</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>alpha</name>
  <longname>Alpha filter</longname>
  <class>Filter/Effect/Video</class>
  <description>Adds an alpha channel to video - uniform or via chroma-keying</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;
Edward Hervey &lt;edward.hervey@collabora.co.uk&gt;
Jan Schmidt &lt;thaytan@noraisin.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>gdkpixbuf</name>
 <description>GDK Pixbuf decoder &amp; scaler</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgdkpixbuf.so</filename>
 <size>28992</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>gdkpixbufdec</name>
  <rank>64</rank>
  <longname>GdkPixbuf image decoder</longname>
  <class>Codec/Decoder/Image</class>
  <description>Decodes images in a video stream using GdkPixbuf</description>
  <author>David A. Schleef &lt;ds@schleef.org&gt;, Renato Filho &lt;renato.filho@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>image/png; image/gif; image/x-icon; application/x-navi-animation; image/x-cmu-raster; image/x-sun-raster; image/x-pixmap; image/tiff; image/x-portable-anymap; image/x-portable-bitmap; image/x-portable-graymap; image/x-portable-pixmap; image/bmp; image/x-bmp; image/x-MS-bmp; image/vnd.wap.wbmp; image/x-bitmap; image/x-tga; image/x-pcx; image/svg; image/svg+xml</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>gdkpixbufscale</name>
  <longname>GdkPixbuf image scaler</longname>
  <class>Filter/Effect/Video</class>
  <description>Resizes video</description>
  <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;
Wim Taymans &lt;wim.taymans@chello.be&gt;
Renato Filho &lt;renato.filho@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>ximagesink</name>
 <description>X11 video output element based on standard Xlib calls</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstximagesink.so</filename>
 <size>49496</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>ximagesink</name>
  <rank>128</rank>
  <longname>Video sink</longname>
  <class>Sink/Video</class>
  <description>A standard X based videosink</description>
  <author>Julien Moutte &lt;julien@moutte.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <interface>GstNavigation</interface>
  <interface>GstXOverlay</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>video4linux2</name>
 <description>elements for Video 4 Linux</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideo4linux2.so</filename>
 <size>86776</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>v4l2src</name>
  <longname>Video (video4linux2/raw) Source</longname>
  <class>Source/Video</class>
  <description>Reads raw frames from a video4linux2 (BT8x8) device</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;, Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)8, depth=(int)8, red_mask=(int)224, green_mask=(int)28, blue_mask=(int)3, endianness=(int)1234, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)15, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, endianness=(int)1234, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)16, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, endianness=(int)1234, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)15, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, endianness=(int)4321, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)16, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, endianness=(int)4321, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, endianness=(int)4321, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, endianness=(int)4321, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, endianness=(int)4321, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, endianness=(int)4321, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)YVU9, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)YV12, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)YUY2, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)UYVY, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)Y42B, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)Y41B, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)Y41P, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)YUV9, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-raw-bayer, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; image/jpeg, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; image/jpeg, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]; video/x-dv, systemstream=(boolean)true, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 100/1 ]</caps>
  </padtemplate>
  <interface>GstVideoOrientation</interface>
  <interface>GstPropertyProbe</interface>
  <interface>GstColorBalance</interface>
  <interface>GstTuner</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
</plugin>
<plugin>
 <name>ogg</name>
 <description>ogg stream manipulation (info about ogg: http://xiph.org)</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstogg.so</filename>
 <size>118072</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>oggdemux</name>
  <rank>256</rank>
  <longname>Ogg demuxer</longname>
  <class>Codec/Demuxer</class>
  <description>demux ogg streams (info about ogg: http://xiph.org)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/ogg; application/x-annodex</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src_%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>oggmux</name>
  <longname>Ogg muxer</longname>
  <class>Codec/Muxer</class>
  <description>mux ogg streams (info about ogg: http://xiph.org)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/ogg</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>video/x-theora; audio/x-vorbis; audio/x-flac; audio/x-speex; application/x-ogm-video; application/x-ogm-audio; video/x-dirac; video/x-smoke; text/x-cmml, encoded=(boolean)true</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>ogmaudioparse</name>
  <rank>256</rank>
  <longname>OGM audio stream parser</longname>
  <class>Codec/Decoder/Audio</class>
  <description>parse an OGM audio header and stream</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-ogm-audio</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>audio/ms-gsm, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)3, rate=(int)[ 8000, 48000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)2, rate=(int)[ 16000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-raw-int, endianness=(int)1234, signed=(boolean){ true, false }, width=(int){ 8, 16, 24, 32 }, depth=(int)[ 1, 32 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-vorbis, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-ac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ]; audio/x-dts; audio/mpeg, mpegversion=(int)4, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-alaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-wms, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)microsoft, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)dvi, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)1, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)2, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)3, bitrate=(int)[ 0, 2147483647 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ], block_align=(int)[ 1, 2147483647 ]; audio/x-vnd.sony.atrac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-raw-float, endianness=(int)1234, width=(int){ 32, 64 }, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 8 ]; audio/x-voxware, voxwaretype=(int)98, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; application/x-ogg-avi</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>ogmvideoparse</name>
  <rank>256</rank>
  <longname>OGM video stream parser</longname>
  <class>Codec/Decoder/Video</class>
  <description>parse an OGM video header and stream</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-ogm-video</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>video/x-3ivx, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-asus, asusversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-asus, asusversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-cirrus-logic-accupak, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-compressed-yuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-rgb, bpp=(int){ 8, 24 }, depth=(int){ 8, 24 }, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-divx, divxversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-divx, divxversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-truemotion, trueversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-dv, systemstream=(boolean)false, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-divx, divxversion=(int)5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-flash-video, flvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h264, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-huffyuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-intel-h263, variant=(string)intel, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-yuv, format=(fourcc)I420, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)lead, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)microsoft, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/mpeg, mpegversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; image/jpeg, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msmpeg, msmpegversion=(int)42, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msmpeg, msmpegversion=(int)43, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/mpeg, systemstream=(boolean)false, mpegversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/mpeg, systemstream=(boolean)false, mpegversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msmpeg, msmpegversion=(int)41, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-mszh, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; image/png, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-rle, layout=(string)microsoft, depth=(int)[ 1, 64 ], framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-indeo, indeoversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/sp5x, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-truemotion, trueversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-camtasia, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-ultimotion, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-ati-vcr, vcrversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-ati-vcr, vcrversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)vdolive, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)vivo, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-vmnc, version=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-vp3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h264, variant=(string)videosoft, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-wmv, wmvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-wmv, wmvversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-wmv, wmvversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-xvid, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-xan, wcversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-yuv, format=(fourcc)YUY2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-raw-yuv, format=(fourcc)YVU9, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-zlib, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-cinepak, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h264, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-msvideocodec, msvideoversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-h263, variant=(string)xirlink, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]; video/x-dirac, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ]</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>ogmtextparse</name>
  <rank>256</rank>
  <longname>OGM text stream parser</longname>
  <class>Codec/Decoder/Subtitle</class>
  <description>parse an OGM text header and stream</description>
  <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-ogm-text</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>text/plain</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>oggparse</name>
  <longname>Ogg parser</longname>
  <class>Codec/Parser</class>
  <description>parse ogg streams into pages (info about ogg: http://xiph.org)</description>
  <author>Michael Smith &lt;msmith@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/ogg</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/ogg</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>oggaviparse</name>
  <rank>256</rank>
  <longname>Ogg AVI parser</longname>
  <class>Codec/Parser</class>
  <description>parse an ogg avi stream into pages (info about ogg: http://xiph.org)</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-ogg-avi</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-vorbis</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>gdp</name>
 <description>Payload/depayload GDP packets</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgdp.so</filename>
 <size>33720</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>gdpdepay</name>
  <longname>GDP Depayloader</longname>
  <class>GDP/Depayloader</class>
  <description>Depayloads GStreamer Data Protocol buffers</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>application/x-gdp</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>gdppay</name>
  <longname>GDP Payloader</longname>
  <class>GDP/Payloader</class>
  <description>Payloads GStreamer Data Protocol buffers</description>
  <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>application/x-gdp</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>gamma</name>
 <description>Changes gamma on video images</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstgamma.so</filename>
 <size>11576</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>gamma</name>
  <longname>Video gamma correction</longname>
  <class>Filter/Effect/Video</class>
  <description>Adjusts gamma on a video stream</description>
  <author>Arwed v. Merkatz &lt;v.merkatz@gmx.net</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ IYUV, I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-yuv, format=(fourcc){ IYUV, I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>1394</name>
 <description>Source for DV data via IEEE1394 interface</description>
 <filename>/usr/lib64/gstreamer-0.10/libgst1394.so</filename>
 <size>30296</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>dv1394src</name>
  <longname>Firewire (1394) DV video source</longname>
  <class>Source/Video</class>
  <description>Source for DV video data from firewire port</description>
  <author>Erik Walthinsen &lt;omega@temple-baptist.com&gt;
Daniel Fischer &lt;dan@f3c.com&gt;
Wim Taymans &lt;wim@fluendo.com&gt;
Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-dv, format=(string){ NTSC, PAL }, systemstream=(boolean)true</caps>
  </padtemplate>
  <interface>GstPropertyProbe</interface>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>dv</uri_protocol>
 </feature>
</plugin>
<plugin>
 <name>coreelements</name>
 <description>standard GStreamer elements</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstcoreelements.so</filename>
 <size>169184</size>
 <m32p>1207306682</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gstreamer</source>
 <package>Fedora Core gstreamer package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>capsfilter</name>
  <longname>CapsFilter</longname>
  <class>Generic</class>
  <description>Pass data without modification, limiting formats</description>
  <author>David Schleef &lt;ds@schleef.org&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>fakesrc</name>
  <longname>Fake Source</longname>
  <class>Source</class>
  <description>Push empty (no data) buffers around</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>fakesink</name>
  <longname>Fake Sink</longname>
  <class>Sink</class>
  <description>Black hole for data</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;, Mr. &apos;frag-me-more&apos; Vanderwingo &lt;wingo@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>fdsrc</name>
  <longname>Filedescriptor Source</longname>
  <class>Source/File</class>
  <description>Read from a file descriptor</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>fd</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>fdsink</name>
  <longname>Filedescriptor Sink</longname>
  <class>Sink/File</class>
  <description>Write data to a file descriptor</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>sink</uri_type>
  <uri_protocol>fd</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>filesrc</name>
  <rank>256</rank>
  <longname>File Source</longname>
  <class>Source/File</class>
  <description>Read from arbitrary point in a file</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>source</uri_type>
  <uri_protocol>file</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>identity</name>
  <longname>Identity</longname>
  <class>Generic</class>
  <description>Pass data without modification</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>queue</name>
  <longname>Queue</longname>
  <class>Generic</class>
  <description>Simple data queue</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>filesink</name>
  <rank>256</rank>
  <longname>File Sink</longname>
  <class>Sink/File</class>
  <description>Write stream to a file</description>
  <author>Thomas &lt;thomas@apestaart.org&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <interface>GstURIHandler</interface>
  <uri_type>sink</uri_type>
  <uri_protocol>file</uri_protocol>
 </feature>
 <feature typename="GstElementFactory">
  <name>tee</name>
  <longname>Tee pipe fitting</longname>
  <class>Generic</class>
  <description>1-to-N pipe fitting</description>
  <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src%d</nametemplate>
   <direction>src</direction>
   <presence>request</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>typefind</name>
  <longname>TypeFind</longname>
  <class>Generic</class>
  <description>Finds the media type of a stream</description>
  <author>Benjamin Otte &lt;in7y118@public.uni-hamburg.de&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>multiqueue</name>
  <longname>MultiQueue</longname>
  <class>Generic</class>
  <description>Multiple data queue</description>
  <author>Edward Hervey &lt;edward@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>ANY</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src%d</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>multipart</name>
 <description>multipart stream manipulation</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstmultipart.so</filename>
 <size>25728</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>multipartdemux</name>
  <rank>256</rank>
  <longname>Multipart demuxer</longname>
  <class>Codec/Demuxer</class>
  <description>demux multipart streams</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;, Sjoerd Simons &lt;sjoerd@luon.net&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>multipart/x-mixed-replace</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>sometimes</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
 <feature typename="GstElementFactory">
  <name>multipartmux</name>
  <longname>Multipart muxer</longname>
  <class>Codec/Muxer</class>
  <description>mux multipart streams</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>multipart/x-mixed-replace</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink_%d</nametemplate>
   <direction>sink</direction>
   <presence>request</presence>
   <caps>ANY</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>speex</name>
 <description>Speex plugin library</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstspeex.so</filename>
 <size>41592</size>
 <m32p>1203590720</m32p>
 <version>0.10.7</version>
 <license>LGPL</license>
 <source>gst-plugins-good</source>
 <package>Fedora Core gstreamer-plugins-good package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>speexenc</name>
  <longname>Speex audio encoder</longname>
  <class>Codec/Encoder/Audio</class>
  <description>Encodes audio in Speex format</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-speex</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 6000, 48000 ], channels=(int)[ 1, 2 ], endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16</caps>
  </padtemplate>
  <interface>GstTagSetter</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>speexdec</name>
  <rank>256</rank>
  <longname>Speex audio decoder</longname>
  <class>Codec/Decoder/Audio</class>
  <description>decode speex streams to audio</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, rate=(int)[ 6000, 48000 ], channels=(int)[ 1, 2 ], endianness=(int)1234, signed=(boolean)true, width=(int)16, depth=(int)16</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-speex</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>videoscale</name>
 <description>Resizes video</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstvideoscale.so</filename>
 <size>46544</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>videoscale</name>
  <longname>Video scaler</longname>
  <class>Filter/Effect/Video</class>
  <description>Resizes video</description>
  <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YUY2, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YVYU, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)UYVY, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y800, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YV12, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)16, endianness=(int)1234, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)15, endianness=(int)1234, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, alpha_mask=(int)-16777216, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, alpha_mask=(int)-16777216, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)AYUV, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YUY2, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YVYU, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)UYVY, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)Y800, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)I420, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-yuv, format=(fourcc)YV12, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)16, endianness=(int)1234, red_mask=(int)63488, green_mask=(int)2016, blue_mask=(int)31, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw-rgb, bpp=(int)16, depth=(int)15, endianness=(int)1234, red_mask=(int)31744, green_mask=(int)992, blue_mask=(int)31, width=(int)[ 2, 2147483647 ], height=(int)[ 2, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</caps>
  </padtemplate>
 </feature>
</plugin>
<plugin>
 <name>alsa</name>
 <description>ALSA plugin library</description>
 <filename>/usr/lib64/gstreamer-0.10/libgstalsa.so</filename>
 <size>95704</size>
 <m32p>1207310075</m32p>
 <version>0.10.19</version>
 <license>LGPL</license>
 <source>gst-plugins-base</source>
 <package>Fedora gstreamer-plugins-base package</package>
 <origin>http://download.fedora.redhat.com/fedora</origin>
 <feature typename="GstElementFactory">
  <name>alsamixer</name>
  <longname>Alsa mixer</longname>
  <class>Generic/Audio</class>
  <description>Control sound input and output levels with ALSA</description>
  <author>Leif Johnson &lt;leif@ambient.2y.net&gt;</author>
  <interface>GstMixer</interface>
  <interface>GstPropertyProbe</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>alsasrc</name>
  <rank>256</rank>
  <longname>Audio source (ALSA)</longname>
  <class>Source/Audio</class>
  <description>Read from a sound card via ALSA</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>src</nametemplate>
   <direction>src</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)32, depth=(int)32, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)32, depth=(int)24, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)24, depth=(int)24, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, signed=(boolean){ true, false }, width=(int)8, depth=(int)8, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</caps>
  </padtemplate>
  <interface>GstMixer</interface>
  <interface>GstPropertyProbe</interface>
  <interface>GstImplementsInterface</interface>
 </feature>
 <feature typename="GstElementFactory">
  <name>alsasink</name>
  <rank>256</rank>
  <longname>Audio sink (ALSA)</longname>
  <class>Sink/Audio</class>
  <description>Output to a sound card via ALSA</description>
  <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
  <padtemplate>
   <nametemplate>sink</nametemplate>
   <direction>sink</direction>
   <presence>always</presence>
   <caps>audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)32, depth=(int)32, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)24, depth=(int)24, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)32, depth=(int)24, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, endianness=(int){ 1234, 4321 }, signed=(boolean){ true, false }, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw-int, signed=(boolean){ true, false }, width=(int)8, depth=(int)8, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-iec958</caps>
  </padtemplate>
  <interface>GstPropertyProbe</interface>
 </feature>
</plugin>
</GST-PluginRegistry>
